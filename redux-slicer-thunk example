Step-by-Step Guide to Using Redux in React + TypeScript
1. Install Redux and React Redux
To set up Redux with React, you'll need a few packages:


npm install redux react-redux @reduxjs/toolkit
npm install @types/react-redux
redux: Core library for Redux.

react-redux: Integration for using Redux with React components.
@reduxjs/toolkit: A set of tools for efficient Redux development.
@types/react-redux: Type definitions for TypeScript support.
2. Create the Redux Store
We'll use Redux Toolkit's configureStore to create the store. First, create a store folder for organization.

Create a store configuration in store/index.ts:
ts

import { configureStore } from '@reduxjs/toolkit';
import userReducer from './userSlice';
import orderReducer from './orderSlice';

// Combine different slices (reducers) for users and orders.
const store = configureStore({
  reducer: {
    users: userReducer,
    orders: orderReducer,
  },
});

// Type definitions for store and dispatch
export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

export default store;
This store combines multiple reducers (which weâ€™ll define in the next step) into a single state management system.

3. Create Redux Slices for State Management
Redux Toolkit provides an easy way to define slices of state, which include actions and reducers.

Create a userSlice.ts in store/userSlice.ts:
ts

import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface UserState {
  users: string[];
}

const initialState: UserState = {
  users: [],
};

const userSlice = createSlice({
  name: 'users',
  initialState,
  reducers: {
    setUsers(state, action: PayloadAction<string[]>) {
      state.users = action.payload;
    },
  },
});

export const { setUsers } = userSlice.actions;
export default userSlice.reducer;
This defines a userSlice where the initial state is an empty array, and the setUsers action will update the users state.

Create an orderSlice.ts in store/orderSlice.ts:
ts

import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface OrderState {
  orders: string[];
}

const initialState: OrderState = {
  orders: [],
};

const orderSlice = createSlice({
  name: 'orders',
  initialState,
  reducers: {
    setOrders(state, action: PayloadAction<string[]>) {
      state.orders = action.payload;
    },
  },
});

export const { setOrders } = orderSlice.actions;
export default orderSlice.reducer;
Similarly, this defines an orderSlice where setOrders will update the orders in the Redux state.

4. Provide the Redux Store to the React Application
In order to use the store in your React components, you need to wrap your app with the Provider component from react-redux.

In your src/index.tsx, import the store and wrap the app:
tsx

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import { Provider } from 'react-redux';
import store from './store';

ReactDOM.render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>,
  document.getElementById('root')
);
The Provider component makes the Redux store available to the entire app.

5. Use Redux in Your Components
Now that your Redux store is set up, you can use it to fetch data and dispatch actions.

Fetching User Data: Refactor the UserList component to use Redux state and dispatch actions.
Refactor UserList.tsx to Use Redux:
tsx

import React, { useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import axios from "axios";
import { RootState } from "./store";
import { setUsers } from "./store/userSlice";

const UserList: React.FC = () => {
  const dispatch = useDispatch();
  const users = useSelector((state: RootState) => state.users.users);

  useEffect(() => {
    axios.get("/users").then((response) => {
      dispatch(setUsers(response.data)); // Dispatch action to set users in Redux state
    });
  }, [dispatch]);

  return (
    <div>
      <h1>User List</h1>
      <ul>
        {users.map((user, index) => (
          <li key={index}>{user}</li>
        ))}
      </ul>
    </div>
  );
};

export default UserList;
Here, we're using two Redux hooks:

useDispatch: For dispatching actions (to update the state).
useSelector: For accessing the Redux state.
Fetching Order Data: Similarly, refactor the OrderList component.
Refactor OrderList.tsx to Use Redux:
tsx

import React, { useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import axios from "axios";
import { RootState } from "./store";
import { setOrders } from "./store/orderSlice";

const OrderList: React.FC = () => {
  const dispatch = useDispatch();
  const orders = useSelector((state: RootState) => state.orders.orders);

  useEffect(() => {
    axios.get("/orders").then((response) => {
      dispatch(setOrders(response.data)); // Dispatch action to set orders in Redux state
    });
  }, [dispatch]);

  return (
    <div>
      <h1>Order List</h1>
      <ul>
        {orders.map((order, index) => (
          <li key={index}>{order}</li>
        ))}
      </ul>
    </div>
  );
};

export default OrderList;
6. Debugging with Redux DevTools
Redux DevTools is a powerful feature that helps you inspect the state changes. If you're using Redux Toolkit, it automatically enables Redux DevTools.

You can install the Redux DevTools browser extension.
Once installed, you can track actions and state changes in real time.
7. Optional: Use Redux Thunk for Async Actions
If you need to handle more complex side effects like API calls in actions, you can use Redux Thunk. Redux Toolkit includes Thunk middleware by default.

To dispatch async actions:

Create an async thunk action inside the userSlice.ts:
ts

import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import axios from 'axios';

export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {
  const response = await axios.get('/users');
  return response.data;
});

interface UserState {
  users: string[];
}

const initialState: UserState = {
  users: [],
};

const userSlice = createSlice({
  name: 'users',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder.addCase(fetchUsers.fulfilled, (state, action: PayloadAction<string[]>) => {
      state.users = action.payload;
    });
  },
});

export default userSlice.reducer;
Now, in your component, you can dispatch fetchUsers like this:

tsx
useEffect(() => {
  dispatch(fetchUsers());
}, [dispatch]);
This is an example of how to use Redux Thunk to handle asynchronous actions like fetching data from an API.

